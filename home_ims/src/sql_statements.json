{
    "ddl": [
        {
            "function": "Create Database",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE DATABASE Home_IMS;"
            ],
            "order": 0
        },
        {
            "function": "Create Table ItemType",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.ItemType (",
                "name VARCHAR(255) NOT NULL,",
                "unit VARCHAR(16),",
                "PRIMARY KEY (name)",
                ");"
            ],
            "order": 1
        },
        {
            "function": "Create Table Consumable",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Consumable (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES ItemType(name)",
                ");"
            ],
            "order": 2
        },
        {
            "function": "Create Table Durable",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Durable (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES ItemType(name)",
                ");"
            ],
            "order": 3
        },
        {
            "function": "Create Table NotFood",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.NotFood (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES ItemType(name)",
                ");"
            ],
            "order": 4
        },
        {
            "function": "Create Table Food",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Food (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES ItemType(name)",
                ");"
            ],
            "order": 5
        },
        {
            "function": "Create Table Template",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Template (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name)",
                ");"
            ],
            "order": 6
        },
        {
            "function": "Create Table OtherTemplate",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.OtherTemplate (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES Template(name)",
                ");"
            ],
            "order": 7
        },
        {
            "function": "Create Table Location",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Location (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name)",
                ");"
            ],
            "order": 8
        },
        {
            "function": "Create Table Recipe",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Recipe (",
                "recipe_name VARCHAR(255) NOT NULL,",
                "food_name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (recipe_name, food_name),",
                "FOREIGN KEY (recipe_name) REFERENCES Template(name),",
                "FOREIGN KEY (food_name) REFERENCES Food(name)",
                ");"
            ],
            "order": 9
        },
        {
            "function": "Create Table MealSchedule",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.MealSchedule (",
                "recipe_name VARCHAR(255) NOT NULL,",
                "timestamp DATETIME NOT NULL,",
                "location_name VARCHAR(255) NOT NULL,",
                "meal_type VARCHAR(31),",
                "PRIMARY KEY (recipe_name, timestamp, location_name),",
                "FOREIGN KEY (recipe_name) REFERENCES Recipe(recipe_name),",
                "FOREIGN KEY (location_name) REFERENCES Location(name)",
                ");"
            ],
            "order": 10
        },
        {
            "function": "Create Table User",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.User (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name)",
                ");"
            ],
            "order": 11
        },
        {
            "function": "Create Table Dependent",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Dependent (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES User(name)",
                ");"
            ],
            "order": 12
        },
        {
            "function": "Create Table Parent",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Parent (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES User(name)",
                ");"
            ],
            "order": 13
        },
        {
            "function": "Create Table Ingredients",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Ingredients (",
                "food_name VARCHAR(255) NOT NULL,",
                "recipe_name VARCHAR(255) NOT NULL,",
                "quantity FLOAT NOT NULL,",
                "PRIMARY KEY (food_name, recipe_name),",
                "FOREIGN KEY (food_name) REFERENCES Food(name),",
                "FOREIGN KEY (recipe_name) REFERENCES Recipe(recipe_name),",
                "CHECK (quantity > 0)",
                ");"
            ],
            "order": 14
        },
        {
            "function": "Create Table Storage",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Storage (",
                "storage_name VARCHAR(255) NOT NULL,",
                "location_name VARCHAR(255) NOT NULL,",
                "capacity FLOAT NOT NULL,",
                "PRIMARY KEY (storage_name),",
                "FOREIGN KEY (location_name) REFERENCES Location(name),",
                "CHECK (capacity >= 0 AND capacity <= 2)",
                ");"
            ],
            "order": 15
        },
        {
            "function": "Create Table Dry",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Dry (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES Storage(storage_name)",
                ");"
            ],
            "order": 16
        },
        {
            "function": "Create Table Appliance",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Appliance (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES Storage(storage_name)",
                ");"
            ],
            "order": 17
        },
        {
            "function": "Create Table Fridge",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Fridge (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES Appliance (name)",
                ");"
            ],
            "order": 18
        },
        {
            "function": "Create Table Freezer",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Freezer (",
                "name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (name),",
                "FOREIGN KEY (name) REFERENCES Appliance (name)",
                ");"
            ],
            "order": 19
        },
        {
            "function": "Create Table Inventory",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Inventory (",
                "item_name VARCHAR(255) NOT NULL,",
                "storage_name VARCHAR(255) NOT NULL,",
                "timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,",
                "quantity FLOAT NOT NULL,",
                "PRIMARY KEY (item_name, storage_name, timestamp),",
                "FOREIGN KEY (item_name) REFERENCES ItemType (name),",
                "FOREIGN KEY (storage_name) REFERENCES Storage (storage_name),",
                "CHECK (quantity >= 0)",
                ");"
            ],
            "order": 20
        },
        {
            "function": "Create Table Purchase",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Purchase (",
                "item_name VARCHAR(255) NOT NULL,",
                "timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,",
                "quantity FLOAT NOT NULL,",
                "price FLOAT NOT NULL,",
                "store VARCHAR(255) NOT NULL,",
                "parent_name VARCHAR(255) NOT NULL,",
                "PRIMARY KEY (item_name, timestamp),",
                "FOREIGN KEY (parent_name) REFERENCES Parent (name),",
                "FOREIGN KEY (item_name) REFERENCES ItemType (name),",
                "CHECK (quantity > 0)",
                ");"
            ],
            "order": 21
        },
        {
            "function": "Create Table History",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.History (",
                "item_name VARCHAR(255) NOT NULL,",
                "date_used DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,",
                "quantity FLOAT NOT NULL,",
                "PRIMARY KEY (item_name, date_used),",
                "FOREIGN KEY (item_name) REFERENCES ItemType(name),",
                "CHECK (quantity > 0)",
                ");"
            ],
            "order": 22
        },
        {
            "function": "Create Table Wasted",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Wasted (",
                "item_name VARCHAR(255) NOT NULL,",
                "date_used DATETIME NOT NULL,",
                "PRIMARY KEY (item_name, date_used),",
                "FOREIGN KEY (item_name, date_used) REFERENCES History (item_name, date_used)",
                ");"
            ],
            "order": 23
        },
        {
            "function": "Create Table Used",
            "inputs": [],
            "outputs": [],
            "query": [
                "CREATE TABLE Home_IMS.Used (",
                "item_name VARCHAR(255) NOT NULL,",
                "date_used DATETIME NOT NULL,",
                "user_name VARCHAR(255),",
                "PRIMARY KEY (item_name, date_used),",
                "FOREIGN KEY (item_name, date_used) REFERENCES History (item_name, date_used),",
                "FOREIGN KEY (user_name) REFERENCES User (name)",
                ");"
            ],
            "order": 24
        }
    ],
    "dml/dql": {
        "MealSchedule": [
            {
                "function": "Create a meal schedule",
                "inputs": [
                    "@recipe_name",
                    "@timestamp",
                    "@location_name",
                    "@meal_type"
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.MealSchedule (recipe_name, timestamp, location_name, meal_type)",
                    "VALUES (%s, %s, %s, %s);"
                ]
            },
            {
                "function": "Delete a meal schedule",
                "inputs": [
                    "@recipe_name",
                    "@timestamp"
                ],
                "outputs": [],
                "query": [
                    "DELETE FROM Home_IMS.MealSchedule",
                    "WHERE recipe_name = %s",
                    "AND timestamp = %s;"
                ]
            },
            {
                "function": "Select meal schedules",
                "inputs": [
                    "@recipe_name",
                    "@timestamp_from",
                    "@timestamp_to",
                    "@location_name",
                    "@meal_type"
                ],
                "outputs": [
                    "recipe_name",
                    "timestamp",
                    "location_name",
                    "meal_type",
                ],
                "query": [
                    "SELECT recipe_name, timestamp, location_name, meal_type",
                    "FROM Home_IMS.MealSchedule",
                    "WHERE recipe_name LIKE %s",
                    "AND timestamp BETWEEN %s AND %s",
                    "AND location_name LIKE %s",
                    "AND meal_type LIKE %s;",
                ]
            },
        ],
        "ItemType": [
            {
                "function": "Add item type",
                "inputs": [
                    "@name",
                    "@unit",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.ItemType (name, unit)",
                    "VALUES (%s, %s);",
                ]
            },
            {
                "function": "Select item type",
                "inputs": [
                    "@name",
                ],
                "outputs": [
                    "name",
                    "unit"
                ],
                "query": [
                    "SELECT name, unit",
                    "FROM Home_IMS.ItemType",
                    "WHERE name LIKE %s;",
                ]
            },
            {
                "function": "TODO: Daniel I have no idea what this does",
                "inputs": [
                    "@name",
                ],
                "outputs": [
                    "recipe_name",
                    "food_name",
                    "timestamp",
                    "location_name",
                    "meal_type"
                ],
                "query": [
                    "SELECT R.recipe_name, R.food_name, M.timestamp, M.location_name, M.meal_type",
                    "FROM Home_IMS.MealSchedule AS M",
                    "JOIN Home_IMS.Recipe AS R ON M.recipe_name = R.recipe_name",
                    "WHERE R.food_name = %s;",
                ]
            },
        ],
        "Consumable": [
            {
                "function": "Add consumable",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Consumable (name)",
                    "VALUES (%s);",
                ]
            },
            {
                "function": "Select consumable",
                "inputs": [
                    "@name",
                ],
                "outputs": [
                    "name",
                    "unit"
                ],
                "query": [
                    "SELECT I.name, I.unit",
                    "FROM Home_IMS.ItemType AS I",
                    "JOIN Home_IMS.Consumable AS C ON I.name = C.name",
                    "WHERE name LIKE %s;"
                ]
            },
        ],
        "Durable": [
            {
                "function": "Add durable",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Durable (name)",
                    "VALUES (%s);",
                ]
            },
            {
                "function": "Select durable",
                "inputs": [
                    "@name",
                ],
                "outputs": [
                    "name",
                    "unit"
                ],
                "query": [
                    "SELECT I.name, I.unit",
                    "FROM Home_IMS.ItemType AS I",
                    "JOIN Home_IMS.Durable AS C ON I.name = C.name",
                    "WHERE name LIKE %s;"
                ]
            },
        ],
        "Food": [
            {
                "function": "Add food",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Food (name)",
                    "VALUES (%s);",
                ]
            },
            {
                "function": "Select food",
                "inputs": [
                    "@name",
                ],
                "outputs": [
                    "name",
                    "unit"
                ],
                "query": [
                    "SELECT I.name, I.unit",
                    "FROM Home_IMS.ItemType AS I",
                    "JOIN Home_IMS.Food AS C ON I.name = C.name",
                    "WHERE name LIKE %s;"
                ]
            },
        ],
        "NotFood": [
            {
                "function": "Add not food",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.NotFood (name)",
                    "VALUES (%s);",
                ]
            },
            {
                "function": "Select not food",
                "inputs": [
                    "@name",
                ],
                "outputs": [
                    "name",
                    "unit"
                ],
                "query": [
                    "SELECT I.name, I.unit",
                    "FROM Home_IMS.ItemType AS I",
                    "JOIN Home_IMS.NotFood AS C ON I.name = C.name",
                    "WHERE name LIKE %s;"
                ]
            },
        ],
        "Location": [
            {
                "function": "Add location",
                "inputs": [
                    "@name"
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Location (name)",
                    "VALUES (%s);",
                ]
            },
            {
                "function": "Delete location",
                "inputs": [
                    "@name"
                ],
                "outputs": [],
                "query": [
                    "DELETE FROM Home_IMS.Location",
                    "WHERE name = %s;",
                ]
            },
            {
                "function": "Select locations",
                "inputs": [
                    "@name"
                ],
                "outputs": [
                    "name"
                ],
                "query": [
                    "SELECT name",
                    "FROM Home_IMS.Location",
                    "WHERE name LIKE %s;",
                ]
            },
        ],
        "Storage": [
            {
                "function": "Add storage",
                "inputs": [
                    "@storage_name",
                    "@location_name"
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Storage (storage_name, location_name)",
                    "VALUES (%s, %s);",
                ]
            },
            {
                "function": "Delete storage",
                "inputs": [
                    "@storage_name"
                ],
                "outputs": [],
                "query": [
                    "DELETE FROM Home_IMS.Storage",
                    "WHERE storage_name = %s;",
                ]
            },
            {
                "function": "Select storage",
                "inputs": [
                    "@storage_name",
                    "@location_name"
                ],
                "outputs": [
                    "storage_name",
                    "location_name"
                ],
                "query": [
                    "SELECT storage_name, location_name",
                    "FROM Home_IMS.Storage",
                    "WHERE storage_name LIKE %s",
                    "AND location_name LIKE %s;",
                ]
            },
        ],
        "Dry": [
            {
                "function": "Add dry storage",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Dry (name)",
                    "VALUES (%s);",
                ]
            },
            {
                "function": "Delete dry storage",
                "inputs": [
                    "@name"
                ],
                "outputs": [],
                "query": [
                    "DELETE FROM Home_IMS.Dry",
                    "WHERE name = %s;",
                ]
            },
            {
                "function": "Select dry storage",
                "inputs": [
                    "@storage_name",
                    "@location_name"
                ],
                "outputs": [
                    "storage_name",
                    "location_name"
                ],
                "query": [
                    "SELECT S.storage_name, S.location_name",
                    "FROM Home_IMS.Storage as S",
                    "JOIN Home_IMS.Dry as D ON S.storage_name = D.name",
                    "WHERE S.storage_name LIKE %s",
                    "AND S.location_name LIKE %s;",
                ]
            },
        ],
        "Appliance": [
            {
                "function": "Add appliance",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Appliance (name)",
                    "VALUES (%s);",
                ]
            },
            {
                "function": "Delete appliance",
                "inputs": [
                    "@name"
                ],
                "outputs": [],
                "query": [
                    "DELETE FROM Home_IMS.Appliance",
                    "WHERE name = %s;",
                ]
            },
            {
                "function": "Select appliance",
                "inputs": [
                    "@storage_name",
                    "@location_name"
                ],
                "outputs": [
                    "storage_name",
                    "location_name"
                ],
                "query": [
                    "SELECT S.storage_name, S.location_name",
                    "FROM Home_IMS.Storage as S",
                    "JOIN Home_IMS.Appliance as A ON S.storage_name = A.name",
                    "WHERE S.storage_name LIKE %s",
                    "AND S.location_name LIKE %s;",
                ]
            },
        ],
        "Fridge": [
            {
                "function": "Add fridge",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Fridge (name)",
                    "VALUES (%s);",
                ]
            },
            {
                "function": "Delete fridge",
                "inputs": [
                    "@name"
                ],
                "outputs": [],
                "query": [
                    "DELETE FROM Home_IMS.Fridge",
                    "WHERE name = %s;",
                ]
            },
            {
                "function": "Select fridge",
                "inputs": [
                    "@storage_name",
                    "@location_name"
                ],
                "outputs": [
                    "storage_name",
                    "location_name"
                ],
                "query": [
                    "SELECT S.storage_name, S.location_name",
                    "FROM Home_IMS.Storage as S",
                    "JOIN Home_IMS.Fridge as F ON S.storage_name = F.name",
                    "WHERE S.storage_name LIKE %s",
                    "AND S.location_name LIKE %s;",
                ]
            },
        ],
        "Freezer": [
            {
                "function": "Add freezer",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Freezer (name)",
                    "VALUES (%s);",
                ]
            },
            {
                "function": "Delete freezer",
                "inputs": [
                    "@name"
                ],
                "outputs": [],
                "query": [
                    "DELETE FROM Home_IMS.Freezer",
                    "WHERE name = %s;",
                ]
            },
            {
                "function": "Select freezer",
                "inputs": [
                    "@storage_name",
                    "@location_name"
                ],
                "outputs": [
                    "storage_name",
                    "location_name"
                ],
                "query": [
                    "SELECT S.storage_name, S.location_name",
                    "FROM Home_IMS.Storage as S",
                    "JOIN Home_IMS.Freezer as F ON S.storage_name = F.name",
                    "WHERE S.storage_name LIKE %s",
                    "AND S.location_name LIKE %s;",
                ]
            },
        ],
        "User": [
            {
                "function": "Add user",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.User (name)",
                    "VALUES (%s);",
                ]
            },
            {
                "function": "Select users",
                "inputs": [
                    "@name",
                ],
                "outputs": [
                    "name"
                ],
                "query": [
                    "SELECT name",
                    "FROM HomeIMS.User",
                    "WHERE name LIKE %s;",
                ]
            },
            {
                "function": "Select items used by user",
                "inputs": [
                    "@user_name",
                ],
                "outputs": [
                    "item_name",
                    "date_used"
                ],
                "query": [
                    "SELECT item_name, date_used",
                    "FROM Home_IMS.Used",
                    "WHERE user_name = %s;",
                ]
            },
        ],
        "Parent": [
            {
                "function": "Add parent",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Parent (name)",
                    "VALUES (%s);",
                ]
            },
        ],
        "Dependent": [
            {
                "function": "Add dependent",
                "inputs": [
                    "@name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Dependent (name)",
                    "VALUES (%s);",
                ]
            },
        ],
        "History": [
            {
                "function": "Add history record",
                "inputs": [
                    "@item_name",
                    "@quantity"
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.History (item_name, quantity)",
                    "VALUES (%s, %s);",
                ]
            },
        ],
        "Wasted": [
            {
                "function": "Add item wasted record",
                "inputs": [
                    "@item_name",
                    "@date_used"
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Wasted (item_name, date_used)",
                    "VALUES (%s, %s);",
                ]
            },
            {
                "function": "Select waste records",
                "inputs": [
                    "@item_name",
                    "@date_used_from",
                    "@date_used_to",
                ],
                "outputs": [
                    "item_name",
                    "date_used"
                ],
                "query": [
                    "SELECT H.item_name, H.date_used",
                    "FROM Home_IMS.History AS H",
                    "JOIN Home_IMS.Wasted AS W",
                    "ON H.item_name = W.item_name AND H.date_used = W.date_used",
                    "WHERE H.item_name LIKE %s",
                    "AND H.date_used BETWEEN %s AND %s;",
                ]
            },
        ],
        "Used": [
            {
                "function": "Add item used record",
                "inputs": [
                    "@item_name",
                    "@date_used",
                    "@user_name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Used (item_name, date_used, user_name)",
                    "VALUES (%s, %s, %s);",
                ]
            },
            {
                "function": "Select waste records",
                "inputs": [
                    "@item_name",
                    "@date_used_from",
                    "@date_used_to",
                    "@user_name",
                ],
                "outputs": [
                    "item_name",
                    "date_used",
                    "user_name",
                ],
                "query": [
                    "SELECT H.item_name, H.date_used, U.user_name",
                    "FROM Home_IMS.History AS H",
                    "JOIN Home_IMS.Used AS U",
                    "ON H.item_name = U.item_name AND H.date_used = U.date_used",
                    "WHERE H.item_name LIKE %s",
                    "AND H.date_used BETWEEN %s AND %s",
                    "AND U.user_name LIKE %s;",
                ]
            },
        ],
        "Purchase": [
            {
                "function": "Add purchase record",
                "inputs": [
                    "@item_name",
                    "@quantity",
                    "@item_price",
                    "@store",
                    "@parent_name",
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Purchase (item_name, quantity, price, store, parent_name)",
                    "VALUES (%s, %s, %s, %s, %s);"
                ]
            },
            {
                "function": "Select purchases",
                "inputs": [
                    "@item_name",
                    "@timestamp_from",
                    "@timestamp_to",
                    "@quantity_min",
                    "@quantity_max",
                    "@item_price_min",
                    "@item_price_max",
                    "@store",
                    "@parent_name",
                ],
                "outputs": [
                    "item_name",
                    "timestamp",
                    "quantity",
                    "price",
                    "store",
                    "parent_name"
                ],
                "query": [
                    "SELECT item_name, timestamp, quantity, price, store, parent_name",
                    "FROM Home_IMS.Purchase",
                    "WHERE item_name LIKE %s",
                    "AND timestamp BETWEEN %s AND %s",
                    "AND quantity BETWEEN %s AND %s",
                    "AND item_price BETWEEN %s AND %s",
                    "AND store LIKE %s",
                    "AND parent_name LIKE %s;"
                ]
            },
            {
                "function": "Get most expensive purchase",
                "inputs": [
                    "@item_name",
                    "@timestamp_from",
                    "@timestamp_to",
                    "@quantity_min",
                    "@quantity_max",
                    "@store",
                    "@parent_name",
                ],
                "outputs": [
                    "max_price"
                ],
                "query": [
                    "SELECT MAX(price) AS price",
                    "FROM Home_IMS.Purchase",
                    "WHERE item_name LIKE %s",
                    "AND timestamp BETWEEN %s AND %s",
                    "AND quantity BETWEEN %s AND %s",
                    "AND store LIKE %s",
                    "AND parent_name LIKE %s;"
                ]
            },
            {
                "function": "Get most expensive purchase price by item name",
                "inputs": [
                    "@timestamp_from",
                    "@timestamp_to",
                    "@quantity_min",
                    "@quantity_max",
                    "@store",
                    "@parent_name",
                ],
                "outputs": [
                    "max_price"
                ],
                "query": [
                    "SELECT MAX(price) AS price",
                    "FROM Home_IMS.Purchase",
                    "GROUP BY item_name",
                    "WHERE timestamp BETWEEN %s AND %s",
                    "AND quantity BETWEEN %s AND %s",
                    "AND store LIKE %s",
                    "AND parent_name LIKE %s;"
                ]
            },
            {
                "function": "Get most expensive purchase price by parent name",
                "inputs": [
                    "@item_name",
                    "@timestamp_from",
                    "@timestamp_to",
                    "@quantity_min",
                    "@quantity_max",
                    "@store",
                ],
                "outputs": [
                    "max_price"
                ],
                "query": [
                    "SELECT MAX(price) AS price",
                    "FROM Home_IMS.Purchase",
                    "GROUP BY parent_name",
                    "WHERE item_name LIKE %s",
                    "AND timestamp BETWEEN %s AND %s",
                    "AND quantity BETWEEN %s AND %s",
                    "AND store LIKE %s;",
                ]
            },
            {
                "function": "Get most expensive purchase price by store",
                "inputs": [
                    "@item_name",
                    "@timestamp_from",
                    "@timestamp_to",
                    "@quantity_min",
                    "@quantity_max",
                    "@parent_name",
                ],
                "outputs": [
                    "max_price"
                ],
                "query": [
                    "SELECT MAX(price) AS price",
                    "FROM Home_IMS.Purchase",
                    "GROUP BY store",
                    "WHERE item_name LIKE %s",
                    "AND timestamp BETWEEN %s AND %s",
                    "AND quantity BETWEEN %s AND %s",
                    "AND parent_name LIKE %s;"
                ]
            },
            {
                "function": "Get average purchase price",
                "inputs": [
                    "@item_name",
                    "@timestamp_from",
                    "@timestamp_to",
                    "@quantity_min",
                    "@quantity_max",
                    "@store",
                    "@parent_name",
                ],
                "outputs": [
                    "average_price"
                ],
                "query": [
                    "SELECT AVG(price) AS price",
                    "FROM Home_IMS.Purchase",
                    "WHERE item_name LIKE %s",
                    "AND timestamp BETWEEN %s AND %s",
                    "AND quantity BETWEEN %s AND %s",
                    "AND store LIKE %s",
                    "AND parent_name LIKE %s;"
                ]
            },
            {
                "function": "Get average purchase price by item name",
                "inputs": [
                    "@timestamp_from",
                    "@timestamp_to",
                    "@quantity_min",
                    "@quantity_max",
                    "@store",
                    "@parent_name",
                ],
                "outputs": [
                    "average_price"
                ],
                "query": [
                    "SELECT AVG(price) AS price",
                    "FROM Home_IMS.Purchase",
                    "GROUP BY item_name",
                    "WHERE timestamp BETWEEN %s AND %s",
                    "AND quantity BETWEEN %s AND %s",
                    "AND store LIKE %s",
                    "AND parent_name LIKE %s;"
                ]
            },
            {
                "function": "Get average purchase price by parent name",
                "inputs": [
                    "@item_name",
                    "@timestamp_from",
                    "@timestamp_to",
                    "@quantity_min",
                    "@quantity_max",
                    "@store",
                ],
                "outputs": [
                    "average_price"
                ],
                "query": [
                    "SELECT AVG(price) AS price",
                    "FROM Home_IMS.Purchase",
                    "GROUP BY parent_name",
                    "WHERE item_name LIKE %s",
                    "AND timestamp BETWEEN %s AND %s",
                    "AND quantity BETWEEN %s AND %s",
                    "AND store LIKE %s;",
                ]
            },
            {
                "function": "Get average purchase price by store",
                "inputs": [
                    "@item_name",
                    "@timestamp_from",
                    "@timestamp_to",
                    "@quantity_min",
                    "@quantity_max",
                    "@parent_name",
                ],
                "outputs": [
                    "average_price"
                ],
                "query": [
                    "SELECT AVG(price) AS price",
                    "FROM Home_IMS.Purchase",
                    "GROUP BY store",
                    "WHERE item_name LIKE %s",
                    "AND timestamp BETWEEN %s AND %s",
                    "AND quantity BETWEEN %s AND %s",
                    "AND parent_name LIKE %s;"
                ]
            },
            {
                "function": "Get total cost",
                "inputs": [
                    "@item_name",
                    "@timestamp_from",
                    "@timestamp_to",
                    "@parent_name",
                ],
                "outputs": [
                    "total_cost"
                ],
                "query": [
                    "SELECT SUM(price * quantity)",
                    "FROM Home_IMS.Purchase",
                    "WHERE item_name LIKE %s",
                    "AND timestamp BETWEEN %s AND %s",
                    "AND parent_name LIKE %s;"
                ]
            },
        ],
        "Recipe": [
            {
                "function": "Create recipe",
                "inputs": [
                    "@recipe_name",
                    "@food_name"
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Recipe (recipe_name, food_name)",
                    "VALUES (%s, %s);"
                ]
            },
            {
                "function": "Delete recipe",
                "inputs": [
                    "@recipe_name",
                    "@food_name"
                ],
                "outputs": [],
                "query": [
                    "DELETE FROM Home_IMS.Recipe AS R",
                    "WHERE R.recipe_name = %s",
                    "AND R.food_name = %s;"
                ]
            },
            {
                "function": "View recipes",
                "inputs": [
                    "@recipe_name",
                    "@food_name"
                ],
                "outputs": [
                    "recipe_name",
                    "food_name"
                ],
                "query": [
                    "SELECT R.recipe_name, R.food_name",
                    "FROM Home_IMS.Recipe AS R",
                    "WHERE R.recipe_name LIKE %s",
                    "AND R.food_name LIKE %s;"
                ]
            },
            {
                "function": "Get estimated recipe cost",
                "inputs": [
                    "@recipe_name"
                ],
                "outputs": [
                    "recipe_name",
                    "cost"
                ],
                "query": [
                    "SELECT R.recipe_name, SUM(P.avg_item_price) as cost",
                    "FROM Home_IMS.Recipe AS R, Home_IMS.Ingredients AS I,",
                    "( SELECT item_name, AVG(price) as avg_item_price",
                    "FROM Home_IMS.Purchase",
                    "GROUP BY item_name",
                    ") AS P",
                    "GROUP BY R.recipe_name",
                    "WHERE R.recipe_name = I.recipe_name",
                    "AND I.food_name = P.item_name",
                    "AND R.recipe_name LIKE %s;",
                ]
            }
        ],
        "Ingredients": [
            {
                "function": "Add ingredient",
                "inputs": [
                    "@food_name",
                    "@recipe_name",
                    "@quantity"
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Ingredients (food_name, recipe_name, quantity)",
                    "VALUES (%s, %s, %s);"
                ]
            },
            {
                "function": "Remove ingredient",
                "inputs": [
                    "@food_name",
                    "@recipe_name",
                ],
                "outputs": [],
                "query": [
                    "DELETE FROM Home_IMS.Ingredients AS I",
                    "WHERE I.food_name = %s",
                    "AND I.recipe_name = %s;",
                ]
            },
            {
                "function": "Change ingredient quantity",
                "inputs": [
                    "@new_quantity",
                    "@food_name",
                    "@recipe_name",
                ],
                "outputs": [],
                "query": [
                    "UPDATE Home_IMS.Ingredients AS I",
                    "SET I.quantity = %s",
                    "WHERE I.food_name = %s",
                    "AND I.recipe_name = %s;",
                ]
            },
            {
                "function": "View ingredients for a recipe",
                "inputs": [
                    "@recipe_name",
                ],
                "outputs": [
                    "food_name"
                ],
                "query": [
                    "SELECT food_name",
                    "FROM Home_IMS.Ingredients",
                    "WHERE recipe_name LIKE %s;"
                ]
            },
        ],
        "Inventory": [
            {
                "function": "Add item to inventory",
                "inputs": [
                    "@item_name",
                    "@storage_name",
                    "@quantity"
                ],
                "outputs": [],
                "query": [
                    "INSERT INTO Home_IMS.Inventory (item_name, storage_name, quantity)",
                    "VALUES (%s, %s, %s);"
                ]
            },
            {
                "function": "Remove item from inventory",
                "inputs": [
                    "@item_name",
                    "@storage_name",
                    "@timestamp"
                ],
                "outputs": [],
                "query": [
                    "DELETE FROM Home_IMS.Inventory AS I",
                    "WHERE I.item_name = %s",
                    "AND I.storage_name = %s",
                    "AND I.timestamp = %s;"
                ]
            },
            {
                "function": "Change item quantity",
                "inputs": [
                    "@new_quantity",
                    "@item_name",
                    "@storage_name",
                    "@timestamp"
                ],
                "outputs": [],
                "query": [
                    "UPDATE Home_IMS.Inventory AS I",
                    "SET I.quantity = %s",
                    "WHERE I.item_name = %s",
                    "AND I.storage_name = %s",
                    "AND I.timestamp = %s;",
                ]
            },
            {
                "function": "Move item storage location",
                "inputs": [
                    "@new_storage_name",
                    "@item_name",
                    "@old_storage_name",
                    "@timestamp"
                ],
                "outputs": [],
                "query": [
                    "TODO Daniel"
                ]
            },
            {
                "function": "View all",
                "inputs": [
                    "@item_name",
                    "@storage_name",
                    "@timestamp_from",
                    "@timestamp_to"
                ],
                "outputs": [
                    "item_name",
                    "storage_name",
                    "timestamp",
                    "quantity"
                ],
                "query": [
                    "SELECT I.item_name, I.storage_name, I.timestamp, I.quantity",
                    "FROM Home_IMS.Inventory AS I",
                    "WHERE I.item_name LIKE %s",
                    "AND I.storage_name LIKE %s",
                    "AND I.timestamp BETWEEN %s AND %s;"
                ]
            }
        ]
    }
}
